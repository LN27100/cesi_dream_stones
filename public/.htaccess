# Utiliser le contrôleur frontal comme fichier index. Il sert de solution de secours lorsque
# chaque autre réécriture/redirection échoue (par exemple, dans un environnement avec des alias sans
# mod_rewrite). De plus, cela réduit le processus de correspondance pour la
# page de démarrage (chemin "/") car sinon Apache appliquera les règles de réécriture à chaque
# fichier DirectoryIndex configuré (par exemple, index.php, index.html, index.pl).
DirectoryIndex index.php

# Par défaut, Apache n'évalue pas les liens symboliques si vous n'avez pas activé cette fonctionnalité
# dans la configuration de votre serveur. Décommentez la ligne suivante si vous
# installez des ressources en tant que liens symboliques ou si vous rencontrez des problèmes liés aux liens symboliques
# lors de la compilation des ressources LESS/Sass/CoffeScript.
# Options +SymLinksIfOwnerMatch

# Désactiver MultiViews empêche la négociation non désirée, par exemple "/index" ne doit pas être résolu
# vers le contrôleur frontal "/index.php" mais être réécrit en "/index.php/index".
<IfModule mod_negotiation.c>
    Options -MultiViews
</IfModule>

<IfModule mod_rewrite.c>
    # Cette Option doit être activée pour RewriteRule, sinon une erreur s'affichera comme
    # 'Options FollowSymLinks ou SymLinksIfOwnerMatch est désactivé ce qui implique que la directive RewriteRule est interdite'.
    Options +SymLinksIfOwnerMatch

    RewriteEngine On

    # Déterminer la RewriteBase automatiquement et la définir comme variable d'environnement.
    # Si vous utilisez des alias Apache pour l'hébergement virtuel en masse ou avez installé le
    # projet dans un sous-répertoire, le chemin de base sera ajouté pour permettre une
    # résolution correcte du fichier index.php et pour rediriger vers l'URI correcte. Cela fonctionnera
    # également dans des environnements sans préfixe de chemin, fournissant une solution sûre et universelle.
    # Mais comme vous n'en avez pas besoin dans ce cas, vous pouvez commenter
    # les 2 lignes suivantes pour éliminer la surcharge.
    RewriteCond %{REQUEST_URI}::$0 ^(/.+)/(.*)::\2$
    RewriteRule .* - [E=BASE:%1]

    # Définit l'en-tête HTTP_AUTHORIZATION supprimé par Apache
    RewriteCond %{HTTP:Authorization} .+
    RewriteRule ^ - [E=HTTP_AUTHORIZATION:%0]

    # Redirige vers l'URI sans contrôleur frontal pour éviter le contenu en double
    # (avec et sans `/index.php`). Ne faites cette redirection que sur la première
    # réécriture par Apache et pas sur les cycles suivants. Sinon, nous obtiendrions un
    # boucle de redirection infinie (requête -> réécriture vers le contrôleur frontal ->
    # redirection -> requête -> ...).
    # Donc, en cas d'erreur "trop de redirections" ou si vous êtes toujours redirigé
    # vers la page de démarrage car votre Apache n'expose pas la variable d'environnement REDIRECT_STATUS
    # , vous avez 2 choix :
    # - désactivez cette fonctionnalité en commentant les 2 lignes suivantes ou
    # - utilisez Apache >= 2.3.9 et remplacez tous les drapeaux L par des drapeaux END et supprimez le
    #   RewriteCond suivant (meilleure solution)
    RewriteCond %{ENV:REDIRECT_STATUS} =""
    RewriteRule ^index\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]

    # Si le nom de fichier demandé existe, il suffit de le servir.
    # Nous voulons seulement laisser Apache servir les fichiers et pas les répertoires.
    # Réécrire toutes les autres requêtes vers le contrôleur frontal.
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ %{ENV:BASE}/index.php [L]
</IfModule>

<IfModule !mod_rewrite.c>
    <IfModule mod_alias.c>
        # Lorsque mod_rewrite n'est pas disponible, nous indiquons une redirection temporaire de
        # la page d'accueil vers le contrôleur frontal explicitement afin que le site web
        # et les liens générés puissent toujours être utilisés.
        RedirectMatch 307 ^/$ /index.php/
        # RedirectTemp ne peut pas être utilisé à la place
    </IfModule>
</IfModule>
